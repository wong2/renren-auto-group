// Generated by CoffeeScript 1.4.0
(function() {
  var $, AutoGroup;

  $ = window.jQuery;

  AutoGroup = {
    init: function() {
      this.NO_GROUP_NAME = '未分组好友';
      this.SHARED_FRIEND_URL_TMPL = _.template('http://friend.renren.com/shareFriends?p=\
                    {%22init%22:true,%22uid%22:true,%22uhead%22:false,%22uname%22:false,\
                    %22group%22:false,%22net%22:false,%22param%22:{%22guest%22:<%=uid%>}}');
      this.score_cache = {};
      return this.createInitBtn();
    },
    createInitBtn: function() {
      var html,
        _this = this;
      html = '<div class="auto-group-btn-container">\
                     <a href="javascript:void(0)" class="auto-group-btn">自动分组</a>\
                 </div>';
      return this.btn = $(html).insertAfter('#groupList').click(function() {
        return _this.start();
      });
    },
    start: function() {
      var _this = this;
      this.friends = window.friends.map(function(friend) {
        return _.pick(friend, 'name', 'id', 'head', 'groups');
      });
      this.group_names = $('#groupList li').map(function(index, element) {
        return element.title;
      });
      this.group_names = _.without(this.group_names, this.NO_GROUP_NAME);
      return this.loadSharedFriends(function() {
        console.log("all loaded");
        return _this.calculate();
      });
    },
    loadSharedFriends: function(callback) {
      var $queue, complete_count, friend_count, m_alert, _ref,
        _this = this;
      m_alert = XN.DO.alert({
        modal: true,
        title: '获取共同好友信息，请稍等',
        message: '加载中..'
      });
      m_alert.footer.hide();
      _ref = [0, this.friends.length], complete_count = _ref[0], friend_count = _ref[1];
      $queue = $({});
      this.friends.forEach(function(friend, index) {
        return $queue.queue('ajaxQueue', function(next) {
          var url;
          url = _this.SHARED_FRIEND_URL_TMPL({
            uid: friend.id
          });
          return $.getJSON(url, function(data) {
            complete_count += 1;
            m_alert.body.innerHTML = "进度：" + complete_count + "/" + friend_count;
            friend.sharedFriends = _.pluck(data.candidate, 'id');
            return next();
          });
        });
      });
      $queue.queue('ajaxQueue', function() {
        m_alert.remove();
        return setTimeout(function() {
          return callback.call(_this);
        }, 500);
      });
      return $queue.dequeue('ajaxQueue');
    },
    score: function(friend1, friend2) {
      var uid1, uid2, _ref;
      _ref = [friend1.id, friend2.id], uid1 = _ref[0], uid2 = _ref[1];
      if (!(uid1 in this.score_cache)) {
        this.score_cache[uid1] = {};
      }
      if (!(uid2 in this.score_cache[uid1])) {
        this.score_cache[uid1][uid2] = _.intersection(friend1.sharedFriends, friend2.sharedFriends).length;
      }
      return this.score_cache[uid1][uid2];
    },
    avgScore: function(friends, friend) {
      var scores, sum, tmp_friend;
      if (!friends.length) {
        return 0;
      } else {
        scores = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = friends.length; _i < _len; _i++) {
            tmp_friend = friends[_i];
            _results.push(this.score(tmp_friend, friend));
          }
          return _results;
        }).call(this);
        sum = _.reduce(scores, function(memo, num) {
          return memo + num;
        });
        return sum / friends.length;
      }
    },
    calculate: function() {
      var bestmatches, group_len, group_name2index, groups, i, m_alert, no_group, t, _i, _len, _ref,
        _this = this;
      m_alert = XN.DO.alert({
        modal: true,
        title: '努力计算中，请稍等',
        message: '计算中...'
      });
      m_alert.footer.hide();
      group_len = this.group_names.length;
      group_name2index = _.object(this.group_names, _.range(group_len));
      groups = _.range(group_len).map(function() {
        return [];
      });
      this.friends.forEach(function(friend) {
        return friend.groups.forEach(function(group_name) {
          return groups[group_name2index[group_name]].push(friend);
        });
      });
      console.log(groups);
      bestmatches = no_group = null;
      _ref = _.range(20);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        console.log("Iteration", t);
        bestmatches = (function() {
          var _j, _ref1, _results;
          _results = [];
          for (i = _j = 0, _ref1 = group_len - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
            _results.push([]);
          }
          return _results;
        })();
        no_group = [];
        this.friends.forEach(function(friend, index) {
          var avg_scores, best, group;
          m_alert.body.innerHTML = "" + t + ": " + (index + 1) + "/" + group_len;
          avg_scores = (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
              group = groups[_j];
              _results.push(this.avgScore(group, friend));
            }
            return _results;
          }).call(_this);
          if (!_.any(avg_scores)) {
            return no_group.push(friend);
          } else {
            best = 0;
            avg_scores.forEach(function(score, index) {
              if (score > avg_scores[best]) {
                return best = index;
              }
            });
            return bestmatches[best].push(friend);
          }
        });
        if (JSON.stringify(bestmatches) === JSON.stringify(groups)) {
          break;
        } else {
          groups = bestmatches;
        }
      }
      return this.over(groups);
    },
    over: function(groups) {
      var _this = this;
      return groups.forEach(function(users, index) {
        console.log(_this.group_names[index], ": ");
        return users.forEach(function(user) {
          return console.log(user.name);
        });
      });
    }
  };

  AutoGroup.init();

  window.AutoGroup = AutoGroup;

}).call(this);
