// Generated by CoffeeScript 1.4.0
(function() {
  var $, AutoGroup;

  $ = window.jQuery;

  AutoGroup = {
    init: function() {
      this.NO_GROUP_NAME = '未分组好友';
      this.SHARED_FRIEND_URL_TMPL = _.template('http://friend.renren.com/shareFriends?p=\
                    {%22init%22:true,%22uid%22:true,%22uhead%22:false,%22uname%22:false,\
                    %22group%22:false,%22net%22:false,%22param%22:{%22guest%22:<%=uid%>}}');
      return this.createButtons();
    },
    createButtons: function() {
      var container, html,
        _this = this;
      html = '<div class="auto-group-btn-container">\
                    <a href="javascript:void(0)" class="backup-group-btn">备份分组</a>\
                </div>\
                <div class="auto-group-btn-container">\
                    <a href="javascript:void(0)" class="restore-group-btn">恢复分组</a>\
                </div>\
                <div class="auto-group-btn-container">\
                    <a href="javascript:void(0)" class="auto-group-btn">自动分组</a>\
                </div>';
      container = $(html).insertAfter('#groupList');
      container.delegate('.backup-group-btn', 'click', function() {
        return _this.backup();
      });
      container.delegate('.restore-group-btn', 'click', function() {
        return _this.restore();
      });
      return container.delegate('.auto-group-btn', 'click', function() {
        return _this.start();
      });
    },
    backup: function() {
      var friends, groups, m_alert;
      m_alert = XN.DO.alert({
        modal: true,
        message: '正在备份当前分组信息...'
      });
      m_alert.footer.hide();
      friends = window.friends.map(function(friend) {
        return _.pick(friend, 'id', 'groups');
      });
      groups = {};
      friends.forEach(function(friend) {
        return friend.groups.forEach(function(group_name) {
          if (group_name in groups) {
            return groups[group_name].push(friend.id);
          } else {
            return groups[group_name] = [friend.id];
          }
        });
      });
      localStorage.chromeAutoGroupBackup = JSON.stringify(groups);
      m_alert.body.innerHTML = "当前分组信息已备份";
      return setTimeout(function() {
        return m_alert.remove();
      }, 2000);
    },
    restore: function() {
      var backup, count, group_count, groups, m_alert, _ref,
        _this = this;
      backup = localStorage.chromeAutoGroupBackup;
      if (!backup) {
        return XN.DO.showError("没有备份过啊亲~");
      } else {
        m_alert = XN.DO.alert("正在恢复备份的分组信息...");
        m_alert.footer.hide();
        groups = JSON.parse(backup);
        _ref = [0, _.size(groups)], count = _ref[0], group_count = _ref[1];
        return _.each(groups, function(uids, group_name) {
          return _this.groupAdd(group_name, uids, function() {
            count += 1;
            if (count >= group_count) {
              m_alert.body.innerHTML = "已恢复到备份的分组，将要刷新页面...";
              return setTimeout(function() {
                m_alert.remove();
                return location.reload();
              }, 1000);
            }
          });
        });
      }
    },
    start: function() {
      var _this = this;
      this.friends = window.friends.map(function(friend) {
        return _.pick(friend, 'name', 'id', 'head', 'groups');
      });
      this.group_names = $('#groupList li').map(function(index, element) {
        return element.title;
      });
      this.group_names = _.without(this.group_names, this.NO_GROUP_NAME);
      return this.loadSharedFriends(function() {
        return _this.calculate();
      });
    },
    loadSharedFriends: function(callback) {
      var $queue, complete_count, friend_count, m_alert, _ref,
        _this = this;
      m_alert = XN.DO.alert({
        modal: true,
        title: '获取共同好友信息，请稍等',
        message: '加载中..'
      });
      m_alert.footer.hide();
      _ref = [0, this.friends.length], complete_count = _ref[0], friend_count = _ref[1];
      $queue = $({});
      this.friends.forEach(function(friend, index) {
        return $queue.queue('ajaxQueue', function(next) {
          var url;
          url = _this.SHARED_FRIEND_URL_TMPL({
            uid: friend.id
          });
          return $.getJSON(url, function(data) {
            complete_count += 1;
            m_alert.body.innerHTML = "进度：" + complete_count + "/" + friend_count;
            friend.sharedFriends = _.pluck(data.candidate, 'id');
            return next();
          });
        });
      });
      $queue.queue('ajaxQueue', function() {
        m_alert.remove();
        return setTimeout(function() {
          return callback.call(_this);
        }, 500);
      });
      return $queue.dequeue('ajaxQueue');
    },
    calculate: function() {
      var blob, friends_len, group_len, group_name2index, groups, m_alert, worker, worker_content,
        _this = this;
      m_alert = XN.DO.alert({
        modal: true,
        title: '努力计算中，请稍等',
        message: '计算中...'
      });
      m_alert.footer.hide();
      friends_len = this.friends.length;
      group_len = this.group_names.length;
      group_name2index = _.object(this.group_names, _.range(group_len));
      groups = _.range(group_len).map(function() {
        return [];
      });
      this.friends.forEach(function(friend) {
        return friend.groups.forEach(function(group_name) {
          return groups[group_name2index[group_name]].push(friend);
        });
      });
      worker_content = document.getElementById('chrome-auto-group-worker-content').textContent;
      blob = new Blob([worker_content]);
      worker = new Worker((window.webkitURL || window.URL).createObjectURL(blob));
      worker.onmessage = function(e) {
        var data;
        data = e.data;
        if (data.type === 'process') {
          return m_alert.body.innerHTML = "第" + data.loop + "轮: " + data.process + "%";
        } else if (data.type === 'over') {
          m_alert.remove();
          return _this.saveNewGroup(groups, data.groups);
        }
      };
      return worker.postMessage({
        type: 'start',
        groups: groups,
        friends: this.friends
      });
    },
    saveNewGroup: function(old_groups, new_groups) {
      var count, group_count, m_alert, _ref,
        _this = this;
      console.log(new_groups);
      m_alert = XN.DO.alert({
        modal: true,
        message: '添加好友到分组中..'
      });
      m_alert.footer.hide();
      _ref = [0, new_groups.length], count = _ref[0], group_count = _ref[1];
      return new_groups.forEach(function(users, index) {
        var new_user_ids, old_user_ids;
        new_user_ids = _.pluck(users, 'id');
        old_user_ids = _.pluck(old_groups[index], 'id');
        return _this.groupAdd(_this.group_names[index], _.union(new_user_ids, old_user_ids), function() {
          count += 1;
          if (count >= group_count) {
            m_alert.remove();
            return _this.over();
          }
        });
      });
    },
    groupAdd: function(group_name, uids, callback) {
      if (callback == null) {
        callback = XN.func.empty;
      }
      return $.post('http://friend.renren.com/editGroup.do', {
        post: JSON.stringify({
          action: 'multiadd',
          name: group_name,
          buddys: uids
        })
      }, callback);
    },
    over: function() {
      XN.DO.showMessage('自动分组完成，即将刷新页面...');
      return setTimeout(function() {
        return location.reload();
      }, 1000);
    }
  };

  AutoGroup.init();

  window.AutoGroup = AutoGroup;

}).call(this);
